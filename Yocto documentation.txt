1 System Requirements
Welcome to the Yocto Project Reference Manual. This manual provides reference information for the current release of the Yocto Project, and is most effectively used after you have an understanding of the basics of the Yocto Project. The manual is neither meant to be read as a starting point to the Yocto Project, nor read from start to finish. Rather, use this manual to find variable definitions, class descriptions, and so forth as needed during the course of using the Yocto Project.

For introductory information on the Yocto Project, see the Yocto Project Website and the “The Yocto Project Development Environment” chapter in the Yocto Project Overview and Concepts Manual.

If you want to use the Yocto Project to quickly build an image without having to understand concepts, work through the Yocto Project Quick Build document. You can find “how-to” information in the Yocto Project Development Tasks Manual. You can find Yocto Project overview and conceptual information in the Yocto Project Overview and Concepts Manual.

Note

For more information about the Yocto Project Documentation set, see the Links and Related Documentation section.

1.1 Supported Linux Distributions
Currently, the Yocto Project is supported on the following distributions:

Ubuntu 18.04 (LTS)

Ubuntu 20.04 (LTS)

Fedora 34

Fedora 35

CentOS 7.x

CentOS 8.x

AlmaLinux 8.5

Debian GNU/Linux 9.x (Stretch)

Debian GNU/Linux 10.x (Buster)

Debian GNU/Linux 11.x (Bullseye)

OpenSUSE Leap 15.3

Note

While the Yocto Project Team attempts to ensure all Yocto Project releases are one hundred percent compatible with each officially supported Linux distribution, you may still encounter problems that happen only with a specific distribution.

Yocto Project releases are tested against the stable Linux distributions in the above list. The Yocto Project should work on other distributions but validation is not performed against them.

In particular, the Yocto Project does not support and currently has no plans to support rolling-releases or development distributions due to their constantly changing nature. We welcome patches and bug reports, but keep in mind that our priority is on the supported platforms listed below.

You may use Windows Subsystem For Linux v2 to set up a build host using Windows 10, but validation is not performed against build hosts using WSLv2.

The Yocto Project is not compatible with WSLv1, it is compatible but not officially supported nor validated with WSLv2, if you still decide to use WSL please upgrade to WSLv2.

If you encounter problems, please go to Yocto Project Bugzilla and submit a bug. We are interested in hearing about your experience. For information on how to submit a bug, see the Yocto Project Bugzilla wiki page and the “Submitting a Defect Against the Yocto Project” section in the Yocto Project Development Tasks Manual.

1.2 Required Packages for the Build Host
The list of packages you need on the host development system can be large when covering all build scenarios using the Yocto Project. This section describes required packages according to Linux distribution and function.

1.2.1 Ubuntu and Debian
Here are the required packages by function given a supported Ubuntu or Debian Linux distribution:

Note

If your build system has the oss4-dev package installed, you might experience QEMU build failures due to the package installing its own custom /usr/include/linux/soundcard.h on the Debian system. If you run into this situation, try either of these solutions:

$ sudo apt build-dep qemu
$ sudo apt remove oss4-dev
For Debian-8, python3-git and pylint3 are no longer available via apt.

$ sudo pip3 install GitPython pylint==1.9.5
Essentials: Packages needed to build an image on a headless system:

$ sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev zstd liblz4-tool
Documentation: Packages needed if you are going to build out the Yocto Project documentation manuals:

$ sudo apt install make python3-pip
$ sudo pip3 install sphinx sphinx_rtd_theme pyyaml
Note

It is currently not possible to build out documentation from Debian 8 (Jessie) because of outdated pip3 and python3. python3-sphinx is too outdated.

1.2.2 Fedora Packages
Here are the required packages by function given a supported Fedora Linux distribution:

Essentials: Packages needed to build an image for a headless system:

$ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum socat python3-pexpect findutils which file cpio python python3-pip xz python3-GitPython python3-jinja2 SDL-devel xterm rpcgen mesa-libGL-devel perl-FindBin perl-File-Compare perl-File-Copy perl-locale zstd lz4
Documentation: Packages needed if you are going to build out the Yocto Project documentation manuals:

$ sudo dnf install make python3-pip which
$ sudo pip3 install sphinx sphinx_rtd_theme pyyaml
1.2.3 openSUSE Packages
Here are the required packages by function given a supported openSUSE Linux distribution:

Essentials: Packages needed to build an image for a headless system:

$ sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml diffstat makeinfo python-curses patch socat python3 python3-curses tar python3-pip python3-pexpect xz which python3-Jinja2 Mesa-libEGL1 libSDL-devel xterm rpcgen Mesa-dri-devel zstd lz4
$ sudo pip3 install GitPython
Documentation: Packages needed if you are going to build out the Yocto Project documentation manuals:

$ sudo zypper install make python3-pip which
$ sudo pip3 install sphinx sphinx_rtd_theme pyyaml
1.2.4 CentOS-7 Packages
Here are the required packages by function given a supported CentOS-7 Linux distribution:

Essentials: Packages needed to build an image for a headless system:

$ sudo yum install -y epel-release
$ sudo yum makecache
$ sudo yum install gawk make wget tar bzip2 gzip python3 unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python3-pip xz which SDL-devel xterm mesa-libGL-devel zstd lz4
$ sudo pip3 install GitPython jinja2
Note

Extra Packages for Enterprise Linux (i.e. epel-release) is a collection of packages from Fedora built on RHEL/CentOS for easy installation of packages not included in enterprise Linux by default. You need to install these packages separately.

The makecache command consumes additional Metadata from epel-release.

Documentation: Packages needed if you are going to build out the Yocto Project documentation manuals:

$ sudo yum install make python3-pip which
$ sudo pip3 install sphinx sphinx_rtd_theme pyyaml
1.2.5 CentOS-8 Packages
Here are the required packages by function given a supported CentOS-8 Linux distribution:

Essentials: Packages needed to build an image for a headless system:

$ sudo dnf install -y epel-release
$ sudo dnf config-manager --set-enabled PowerTools
$ sudo dnf makecache
$ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache socat perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python3-pip python3-GitPython python3-jinja2 python3-pexpect xz which SDL-devel xterm rpcgen mesa-libGL-devel zstd lz4
Note

Extra Packages for Enterprise Linux (i.e. epel-release) is a collection of packages from Fedora built on RHEL/CentOS for easy installation of packages not included in enterprise Linux by default. You need to install these packages separately.

The PowerTools repo provides additional packages such as rpcgen and texinfo.

The makecache command consumes additional Metadata from epel-release.

Documentation: Packages needed if you are going to build out the Yocto Project documentation manuals:

$ sudo dnf install make python3-pip which
$ sudo pip3 install sphinx sphinx_rtd_theme pyyaml
1.3 Required Git, tar, Python and gcc Versions
In order to use the build system, your host development system must meet the following version requirements for Git, tar, and Python:

Git 1.8.3.1 or greater

tar 1.28 or greater

Python 3.6.0 or greater

If your host development system does not meet all these requirements, you can resolve this by installing a buildtools tarball that contains these tools. You can get the tarball one of two ways: download a pre-built tarball or use BitBake to build the tarball.

In addition, your host development system must meet the following version requirement for gcc:

gcc 5.0 or greater

If your host development system does not meet this requirement, you can resolve this by installing a buildtools-extended tarball that contains additional tools, the equivalent of the Debian/Ubuntu build-essential package.

In the sections that follow, three different methods will be described for installing the buildtools or buildtools-extended toolset.

1.3.1 Installing a Pre-Built buildtools Tarball with install-buildtools script
The install-buildtools script is the easiest of the three methods by which you can get these tools. It downloads a pre-built buildtools installer and automatically installs the tools for you:

Execute the install-buildtools script. Here is an example:

$ cd poky
$ scripts/install-buildtools \
  --without-extended-buildtools \
  --base-url https://downloads.yoctoproject.org/releases/yocto \
  --release yocto-4.0.999 \
  --installer-version 4.0.999
During execution, the buildtools tarball will be downloaded, the checksum of the download will be verified, the installer will be run for you, and some basic checks will be run to make sure the installation is functional.

To avoid the need of sudo privileges, the install-buildtools script will by default tell the installer to install in:

/path/to/poky/buildtools
If your host development system needs the additional tools provided in the buildtools-extended tarball, you can instead execute the install-buildtools script with the default parameters:

$ cd poky
$ scripts/install-buildtools
Source the tools environment setup script by using a command like the following:

$ source /path/to/poky/buildtools/environment-setup-x86_64-pokysdk-linux
Of course, you need to supply your installation directory and be sure to use the right file (i.e. i586 or x86_64).

After you have sourced the setup script, the tools are added to PATH and any other environment variables required to run the tools are initialized. The results are working versions versions of Git, tar, Python and chrpath. And in the case of the buildtools-extended tarball, additional working versions of tools including gcc, make and the other tools included in packagegroup-core-buildessential.

1.3.2 Downloading a Pre-Built buildtools Tarball
If you would prefer not to use the install-buildtools script, you can instead download and run a pre-built buildtools installer yourself with the following steps:

Locate and download the *.sh at https://downloads.yoctoproject.org/releases/yocto/yocto-4.0.999/buildtools/

Execute the installation script. Here is an example for the traditional installer:

$ sh ~/Downloads/x86_64-buildtools-nativesdk-standalone-4.0.999.sh
Here is an example for the extended installer:

$ sh ~/Downloads/x86_64-buildtools-extended-nativesdk-standalone-4.0.999.sh
During execution, a prompt appears that allows you to choose the installation directory. For example, you could choose the following: /home/your-username/buildtools

Source the tools environment setup script by using a command like the following:

$ source /home/your_username/buildtools/environment-setup-i586-poky-linux
Of course, you need to supply your installation directory and be sure to use the right file (i.e. i585 or x86-64).

After you have sourced the setup script, the tools are added to PATH and any other environment variables required to run the tools are initialized. The results are working versions versions of Git, tar, Python and chrpath. And in the case of the buildtools-extended tarball, additional working versions of tools including gcc, make and the other tools included in packagegroup-core-buildessential.

1.3.3 Building Your Own buildtools Tarball
Building and running your own buildtools installer applies only when you have a build host that can already run BitBake. In this case, you use that machine to build the .sh file and then take steps to transfer and run it on a machine that does not meet the minimal Git, tar, and Python (or gcc) requirements.

Here are the steps to take to build and run your own buildtools installer:

On the machine that is able to run BitBake, be sure you have set up your build environment with the setup script (oe-init-build-env).

Run the BitBake command to build the tarball:

$ bitbake buildtools-tarball
or run the BitBake command to build the extended tarball:

$ bitbake buildtools-extended-tarball
Note

The SDKMACHINE variable in your local.conf file determines whether you build tools for a 32-bit or 64-bit system.

Once the build completes, you can find the .sh file that installs the tools in the tmp/deploy/sdk subdirectory of the Build Directory. The installer file has the string “buildtools” (or “buildtools-extended”) in the name.

Transfer the .sh file from the build host to the machine that does not meet the Git, tar, or Python (or gcc) requirements.

On the machine that does not meet the requirements, run the .sh file to install the tools. Here is an example for the traditional installer:

$ sh ~/Downloads/x86_64-buildtools-nativesdk-standalone-4.0.999.sh
Here is an example for the extended installer:

$ sh ~/Downloads/x86_64-buildtools-extended-nativesdk-standalone-4.0.999.sh
During execution, a prompt appears that allows you to choose the installation directory. For example, you could choose the following: /home/your_username/buildtools

Source the tools environment setup script by using a command like the following:

$ source /home/your_username/buildtools/environment-setup-x86_64-poky-linux
Of course, you need to supply your installation directory and be sure to use the right file (i.e. i586 or x86_64).

After you have sourced the setup script, the tools are added to PATH and any other environment variables required to run the tools are initialized. The results are working versions versions of Git, tar, Python and chrpath. And in the case of the buildtools-extended tarball, additional working versions of tools including gcc, make and the other tools included in packagegroup-core-buildessential.